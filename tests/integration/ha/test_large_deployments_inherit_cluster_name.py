#!/usr/bin/env python3
# Copyright 2024 Canonical Ltd.
# See LICENSE file for licensing details.

import asyncio
import logging
import time

import pytest
from charms.opensearch.v0.constants_charm import PClusterNoDataNode, PClusterNoRelation
from pytest_operator.plugin import OpsTest

from ..helpers import CONFIG_OPTS, MODEL_CONFIG, SERIES, get_leader_unit_ip
from ..helpers_deployments import wait_until
from ..tls.test_tls import TLS_CERTIFICATES_APP_NAME
from .continuous_writes import ContinuousWrites
from .helpers import all_nodes
from .test_horizontal_scaling import IDLE_PERIOD

logger = logging.getLogger(__name__)

REL_ORCHESTRATOR = "peer-cluster-orchestrator"
REL_PEER = "peer-cluster"

MAIN_APP_NOT_AUTOGEN = "opensearch-main"
INVALID_FAILOVER_APP = "opensearch-failover-invalid"

MAIN_APP_AUTOGEN = "opensearch-main-autogen"
FAILOVER_APP_AUTOGEN = "opensearch-failover-autogen"
DATA_APP_AUTOGEN = "opensearch-data-autogen"

CLUSTER_NAME = "log-app"

NON_AUTOGEN_APP_UNITS = {
    MAIN_APP_NOT_AUTOGEN: 1,
    INVALID_FAILOVER_APP: 1,
}

AUTOGEN_APP_UNITS = {
    MAIN_APP_AUTOGEN: 1,
    FAILOVER_APP_AUTOGEN: 1,
    DATA_APP_AUTOGEN: 2,
}


@pytest.mark.runner(["self-hosted", "linux", "X64", "jammy", "xlarge"])
@pytest.mark.group("Cluster name not autogenerated")
@pytest.mark.abort_on_fail
@pytest.mark.skip_if_deployed
async def test_build_and_deploy_not_autogen(ops_test: OpsTest) -> None:
    """Build and deploy one unit of OpenSearch without autogenerated cluster name."""
    # it is possible for users to provide their own cluster for HA testing.
    # Hence, check if there is a pre-existing cluster.
    my_charm = await ops_test.build_charm(".")
    await ops_test.model.set_config(MODEL_CONFIG)

    # Deploy TLS Certificates operator.
    config = {"ca-common-name": "CN_CA"}
    await asyncio.gather(
        ops_test.model.deploy(TLS_CERTIFICATES_APP_NAME, channel="stable", config=config),
        ops_test.model.deploy(
            my_charm,
            application_name=MAIN_APP_NOT_AUTOGEN,
            num_units=1,
            series=SERIES,
            config={"cluster_name": CLUSTER_NAME} | CONFIG_OPTS,
        ),
        ops_test.model.deploy(
            my_charm,
            application_name=INVALID_FAILOVER_APP,
            num_units=1,
            series=SERIES,
            config={"init_hold": True, "roles": "cluster_manager"} | CONFIG_OPTS,
        ),
    )

    # wait until the TLS operator is ready
    await wait_until(
        ops_test,
        apps=[TLS_CERTIFICATES_APP_NAME],
        apps_statuses=["active"],
        units_statuses=["active"],
        wait_for_exact_units={TLS_CERTIFICATES_APP_NAME: 1},
        idle_period=IDLE_PERIOD,
    )

    # integrate TLS to all applications
    for app in [
        MAIN_APP_NOT_AUTOGEN,
        INVALID_FAILOVER_APP,
    ]:
        await ops_test.model.integrate(app, TLS_CERTIFICATES_APP_NAME)

    # confirm all apps are blocked due to missing data node or waiting for relation
    await wait_until(
        ops_test,
        apps=list(NON_AUTOGEN_APP_UNITS.keys()),
        apps_full_statuses={
            MAIN_APP_NOT_AUTOGEN: {"active": []},
            INVALID_FAILOVER_APP: {"blocked": [PClusterNoRelation]},
        },
        units_full_statuses={
            MAIN_APP_NOT_AUTOGEN: {"units": {"active": []}},
            INVALID_FAILOVER_APP: {"units": {"active": []}},
        },
        wait_for_exact_units={app: units for app, units in NON_AUTOGEN_APP_UNITS.items()},
        idle_period=IDLE_PERIOD,
        timeout=1800,
    )


@pytest.mark.runner(["self-hosted", "linux", "X64", "jammy", "xlarge"])
@pytest.mark.group("Cluster name autogenerated")
@pytest.mark.abort_on_fail
@pytest.mark.skip_if_deployed
async def test_build_and_deploy_autogen(ops_test: OpsTest) -> None:
    """Build and deploy one unit of OpenSearch with autogenerated cluster name."""
    # it is possible for users to provide their own cluster for HA testing.
    # Hence, check if there is a pre-existing cluster.
    my_charm = await ops_test.build_charm(".")
    await ops_test.model.set_config(MODEL_CONFIG)

    # Deploy TLS Certificates operator.
    config = {"ca-common-name": "CN_CA"}
    await asyncio.gather(
        ops_test.model.deploy(TLS_CERTIFICATES_APP_NAME, channel="stable", config=config),
        ops_test.model.deploy(
            my_charm,
            application_name=MAIN_APP_AUTOGEN,
            num_units=1,
            series=SERIES,
            config={"roles": "cluster_manager"} | CONFIG_OPTS,
        ),
        ops_test.model.deploy(
            my_charm,
            application_name=FAILOVER_APP_AUTOGEN,
            num_units=1,
            series=SERIES,
            config={"init_hold": True, "roles": "cluster_manager"} | CONFIG_OPTS,
        ),
        ops_test.model.deploy(
            my_charm,
            application_name=DATA_APP_AUTOGEN,
            num_units=2,
            series=SERIES,
            config={"init_hold": True, "roles": "data"} | CONFIG_OPTS,
        ),
    )

    # wait until the TLS operator is ready
    await wait_until(
        ops_test,
        apps=[TLS_CERTIFICATES_APP_NAME],
        apps_statuses=["active"],
        units_statuses=["active"],
        wait_for_exact_units={TLS_CERTIFICATES_APP_NAME: 1},
        idle_period=IDLE_PERIOD,
    )

    # integrate TLS to all applications
    for app in [
        MAIN_APP_AUTOGEN,
        FAILOVER_APP_AUTOGEN,
        DATA_APP_AUTOGEN,
    ]:
        await ops_test.model.integrate(app, TLS_CERTIFICATES_APP_NAME)

    # confirm all apps are blocked due to missing data node or waiting for relation
    await wait_until(
        ops_test,
        apps=list(AUTOGEN_APP_UNITS.keys()),
        apps_full_statuses={
            MAIN_APP_AUTOGEN: {"blocked": [PClusterNoDataNode]},
            FAILOVER_APP_AUTOGEN: {"blocked": [PClusterNoRelation]},
            DATA_APP_AUTOGEN: {"blocked": [PClusterNoRelation]},
        },
        units_full_statuses={
            MAIN_APP_AUTOGEN: {"units": {"blocked": [PClusterNoDataNode]}},
            FAILOVER_APP_AUTOGEN: {"units": {"active": []}},
            DATA_APP_AUTOGEN: {"units": {"active": []}},
        },
        wait_for_exact_units={app: units for app, units in AUTOGEN_APP_UNITS.items()},
        idle_period=IDLE_PERIOD,
        timeout=1800,
    )


@pytest.mark.runner(["self-hosted", "linux", "X64", "jammy", "xlarge"])
@pytest.mark.group("Cluster name not autogenerated")
@pytest.mark.abort_on_fail
async def test_invalid_inherit_cluster_name_integration(ops_test: OpsTest) -> None:
    """If the cluster name wasn't auto generated, cluster name should not be inherited"""
    await ops_test.model.integrate(
        f"{INVALID_FAILOVER_APP}:{REL_PEER}", f"{MAIN_APP_NOT_AUTOGEN}:{REL_ORCHESTRATOR}"
    )

    await wait_until(
        ops_test,
        apps=[MAIN_APP_NOT_AUTOGEN, INVALID_FAILOVER_APP],
        apps_full_statuses={
            MAIN_APP_NOT_AUTOGEN: {"active": []},
            INVALID_FAILOVER_APP: {
                "blocked": ["Cannot relate 2 clusters with different 'cluster_name' values."]
            },
        },
        units_statuses=["active"],
        wait_for_exact_units={app: units for app, units in NON_AUTOGEN_APP_UNITS.items()},
        idle_period=IDLE_PERIOD,
    )


@pytest.mark.runner(["self-hosted", "linux", "X64", "jammy", "xlarge"])
@pytest.mark.group("Cluster name autogenerated")
@pytest.mark.abort_on_fail
async def test_cluster_name_inheritence_and_integration(ops_test: OpsTest) -> None:
    """Data and failover apps should inherit cluster name and integrate with cluster manager."""
    await ops_test.model.integrate(
        f"{DATA_APP_AUTOGEN}:{REL_PEER}", f"{MAIN_APP_AUTOGEN}:{REL_ORCHESTRATOR}"
    )

    await wait_until(
        ops_test,
        apps=[MAIN_APP_AUTOGEN, DATA_APP_AUTOGEN],
        apps_full_statuses={
            MAIN_APP_AUTOGEN: {"active": []},
            DATA_APP_AUTOGEN: {"active": []},
        },
        units_statuses=["active"],
        wait_for_exact_units={
            app: AUTOGEN_APP_UNITS[app] for app in [MAIN_APP_AUTOGEN, DATA_APP_AUTOGEN]
        },
        idle_period=IDLE_PERIOD,
    )

    await ops_test.model.integrate(
        f"{FAILOVER_APP_AUTOGEN}:{REL_PEER}", f"{MAIN_APP_AUTOGEN}:{REL_ORCHESTRATOR}"
    )
    await ops_test.model.integrate(
        f"{DATA_APP_AUTOGEN}:{REL_PEER}", f"{FAILOVER_APP_AUTOGEN}:{REL_ORCHESTRATOR}"
    )

    await wait_until(
        ops_test,
        apps=[MAIN_APP_AUTOGEN, DATA_APP_AUTOGEN, FAILOVER_APP_AUTOGEN],
        apps_full_statuses={
            MAIN_APP_AUTOGEN: {"active": []},
            DATA_APP_AUTOGEN: {"active": []},
            FAILOVER_APP_AUTOGEN: {"active": []},
        },
        units_statuses=["active"],
        wait_for_exact_units={
            app: AUTOGEN_APP_UNITS[app]
            for app in [MAIN_APP_AUTOGEN, DATA_APP_AUTOGEN, FAILOVER_APP_AUTOGEN]
        },
        idle_period=IDLE_PERIOD,
    )

    # make sure data can be written
    c_writes = ContinuousWrites(ops_test, app=DATA_APP_AUTOGEN)
    await c_writes.start()
    time.sleep(30)
    await c_writes.stop()
    assert (await c_writes.count()) > 0, "Continuous writes did not increase"

    leader_unit_ip = await get_leader_unit_ip(ops_test, app=MAIN_APP_AUTOGEN)
    nodes = await all_nodes(ops_test, leader_unit_ip, app=MAIN_APP_AUTOGEN)
    assert len(nodes) == 4, f"Wrong node count. Expecting 4 online nodes, found: {len(nodes)}."
